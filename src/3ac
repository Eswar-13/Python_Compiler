factorial:
	beginfunc 0
	#t0 = n
	#t1 = 0
	#t0 = #t0 <= #t1
	ifFalse #t0 jump L0
	#t2 = 1
 EQUALS 		leave		
	return #t2 
	jump L1

L0:
	#t3 = n
	#t4 = n
	#t5 = 1
	#t4 = #t4 - #t5
	save registers  
	stackpointer -8 
	param #t4 
	call factorial 1
#t6 EQUALS 	return_value	=		
	stackpointer +8 
	restore registers  
	#t3 = #t3 * #t6
 EQUALS 		leave		
	return #t3 

L1:
	#t7 = 1
	#t7 =  - #t7
 EQUALS 		leave		
	return #t7 
	endfunc 


area:
	beginfunc 8
	#t8 = 0
	a = #t8
	#t9 = a
 EQUALS 		leave		
	return #t9 
	endfunc 


Vehicle.__init__:
	beginfunc 0
	#t10 = self
	#t11 = #t10
	#t11 = 0 + #t11
	#t12 = make
	*(#t11) = #t12
	#t13 = self
	#t14 = #t13
	#t14 = 8 + #t14
	#t15 = model
	*(#t14) = #t15
 EQUALS 		leave		
	return  
	endfunc 


Vehicle.start:
	beginfunc 0
	#t16 = self
	#t17 = #t16
	#t17 = 0 + #t17
	#t18 = *(#t17)
	save registers  
	stackpointer -8 
	param #t18 
	call print_str 1
	stackpointer +8 
	restore registers  
	#t19 = self
	#t20 = #t19
	#t20 = 8 + #t20
	#t21 = *(#t20)
	save registers  
	stackpointer -8 
	param #t21 
	call print_str 1
	stackpointer +8 
	restore registers  
 EQUALS 		leave		
	return  
	endfunc 


Car.__init__:
	beginfunc 0
	#t22 = self
	#t23 = #t22
	#t23 = 0 + #t23
	#t24 = make
	*(#t23) = #t24
	#t25 = self
	#t26 = #t25
	#t26 = 8 + #t26
	#t27 = model
	*(#t26) = #t27
	#t28 = self
	#t29 = #t28
	#t29 = 16 + #t29
	#t30 = year
	*(#t29) = #t30
 EQUALS 		leave		
	return  
	endfunc 


Car.start:
	beginfunc 0
	#t31 = self
	#t32 = #t31
	#t32 = 16 + #t32
	#t33 = *(#t32)
	save registers  
	stackpointer -8 
	param #t33 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t34 = self
	#t35 = #t34
	#t35 = 0 + #t35
	#t36 = *(#t35)
	save registers  
	stackpointer -8 
	param #t36 
	call print_str 1
	stackpointer +8 
	restore registers  
	#t37 = self
	#t38 = #t37
	#t38 = 8 + #t38
	#t39 = *(#t38)
	save registers  
	stackpointer -8 
	param #t39 
	call print_str 1
	stackpointer +8 
	restore registers  
 EQUALS 		leave		
	return  
	endfunc 


main:
	beginfunc 128
	#t40 = 42
	x = #t40
	#t41 = 3.14
	cvt_float_to_int #t41
	y = #t41
	#t42 = .str0
	s = #t42
	#t43 = 1
	#t44 = 2
	#t45 = 3
	#t46 = 4
	#t47 = 5
	#t48 = 48
	save registers  
	stackpointer -8 
	param #t48 
	call allocmem 1
#t48 EQUALS 	return_value	=		
	stackpointer +8 
	restore registers  
	#t49 = #t48
	*(#t49) = 5
	#t49 = 8 + #t49
	*(#t49) = #t43
	#t49 = 8 + #t49
	*(#t49) = #t44
	#t49 = 8 + #t49
	*(#t49) = #t45
	#t49 = 8 + #t49
	*(#t49) = #t46
	#t49 = 8 + #t49
	*(#t49) = #t47
	lst = #t48
	#t50 = x
	#t51 = y
	#t50 = #t50 + #t51
	cvt_int_to_float #t50
	a = #t50
	#t52 = x
	#t53 = y
	#t52 = #t52 - #t53
	b = #t52
	#t54 = x
	#t55 = y
	#t54 = #t54 * #t55
	cvt_int_to_float #t54
	c = #t54
	#t56 = x
	#t57 = y
	cvt_int_to_float #t56
	cvt_int_to_float #t57
	#t56 = #t56 / #t57
	d = #t56
	#t58 = x
	#t59 = y
	#t58 = #t58 // #t59
	e = #t58
	#t60 = x
	#t61 = y
	#t60 = #t60 % #t61
	cvt_int_to_float #t60
	f = #t60
	#t62 = x
	#t63 = y
	#t62 = #t62 == #t63
	save registers  
	stackpointer -8 
	param #t62 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t64 = x
	#t65 = y
	#t64 = #t64 != #t65
	save registers  
	stackpointer -8 
	param #t64 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t66 = x
	#t67 = y
	#t66 = #t66 > #t67
	save registers  
	stackpointer -8 
	param #t66 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t68 = x
	#t69 = y
	#t68 = #t68 < #t69
	save registers  
	stackpointer -8 
	param #t68 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t70 = x
	#t71 = y
	#t70 = #t70 >= #t71
	save registers  
	stackpointer -8 
	param #t70 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t72 = x
	#t73 = y
	#t72 = #t72 <= #t73
	save registers  
	stackpointer -8 
	param #t72 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t74 = 1
	#t75 = 0
	#t74 = #t74 && #t75
	save registers  
	stackpointer -8 
	param #t74 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t76 = 1
	#t77 = 0
	#t76 = #t76 || #t77
	save registers  
	stackpointer -8 
	param #t76 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t78 = 1
	#t78 =  ! #t78
	save registers  
	stackpointer -8 
	param #t78 
	call print_bool 1
	stackpointer +8 
	restore registers  
	#t79 = 10
	p = #t79
	#t80 = 11
	q = #t80
	#t81 = p
	#t82 = q
	#t81 = #t81 & #t82
	save registers  
	stackpointer -8 
	param #t81 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t83 = p
	#t84 = q
	#t83 = #t83 | #t84
	save registers  
	stackpointer -8 
	param #t83 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t85 = p
	#t86 = q
	#t85 = #t85 ^ #t86
	save registers  
	stackpointer -8 
	param #t85 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t87 = p
	#t87 =  ~ #t87
	save registers  
	stackpointer -8 
	param #t87 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t88 = x
	#t89 = 5
	x = #t89
	#t90 = x
	#t91 = 3
	#t92 = #t90 + #t91
	x = #t92
	#t93 = x
	#t94 = 2
	#t95 = #t93 - #t94
	x = #t95
	#t96 = x
	#t97 = 4
	#t98 = #t96 * #t97
	x = #t98
	#t99 = x
	#t100 = 3
	#t101 = #t99 / #t100
	x = #t101
	#t102 = x
	#t103 = 2
	#t104 = #t102 // #t103
	x = #t104
	#t105 = x
	#t106 = 3
	#t107 = #t105 % #t106
	x = #t107
	#t108 = x
	#t109 = 2
	#t110 = #t108 ** #t109
	x = #t110
	#t111 = y
	#t112 = 2
	y = #t112
	#t113 = y
	#t114 = 7
	#t115 = #t113 & #t114
	y = #t115
	#t116 = y
	#t117 = 8
	#t118 = #t116 | #t117
	y = #t118
	#t119 = y
	#t120 = 18
	#t121 = #t119 ^ #t120
	y = #t121
	#t122 = y
	#t123 = 2
	#t124 = #t122 << #t123
	y = #t124
	#t125 = y
	#t126 = 2
	#t127 = #t125 >> #t126
	y = #t127
	#t128 = x
	#t129 = 10
	#t128 = #t128 > #t129
	ifFalse #t128 jump L2
	#t130 = .str1
	save registers  
	stackpointer -8 
	param #t130 
	call print_str 1
	stackpointer +8 
	restore registers  
	jump L4

L2:
	#t131 = x
	#t132 = 5
	#t131 = #t131 < #t132
	ifFalse #t131 jump L3
	#t133 = .str2
	save registers  
	stackpointer -8 
	param #t133 
	call print_str 1
	stackpointer +8 
	restore registers  
	jump L4

L3:
	#t134 = .str3
	save registers  
	stackpointer -8 
	param #t134 
	call print_str 1
	stackpointer +8 
	restore registers  

L4:
	#t135 = 0
	i = #t135
	#t136 = i
	#t137 = 1
	#t138 = 5
	i = #t137
	#t139 = i
	jump L6

L5:
	#t139 = #t139 + 1
	i = #t139

L6:
	#t140 = #t139 < #t138
	ifFalse #t140 jump L7
	#t141 = i
	save registers  
	stackpointer -8 
	param #t141 
	call print_int 1
	stackpointer +8 
	restore registers  
	jump L5

L7:
	#t142 = i
	#t143 = 0
	i = #t143

L8:
	#t144 = i
	#t145 = 5
	#t144 = #t144 < #t145
	ifFalse #t144 jump L10
	#t146 = i
	save registers  
	stackpointer -8 
	param #t146 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t147 = i
	#t148 = 1
	#t149 = #t147 + #t148
	i = #t149
	#t150 = i
	#t151 = 3
	#t150 = #t150 == #t151
	ifFalse #t150 jump L9
	jump L10
	jump L9

L9:
	jump L8

L10:
	#t152 = 5
	save registers  
	stackpointer -8 
	param #t152 
	call factorial 1
#t153 EQUALS 	return_value	=		
	stackpointer +8 
	restore registers  
	fact = #t153
	#t154 = fact
	save registers  
	stackpointer -8 
	param #t154 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t155 = 5
	#t156 = 3
	save registers  
	stackpointer -16 
	param #t156 
	param #t155 
	call area 2
#t157 EQUALS 	return_value	=		
	stackpointer +16 
	restore registers  
	ar = #t157
	#t158 = ar
	save registers  
	stackpointer -8 
	param #t158 
	call print_int 1
	stackpointer +8 
	restore registers  
	#t159 = .str4
	#t160 = .str5
	#t161 = 2020
	#t162 = 24
	save registers  
	stackpointer -8 
	param #t162 
	call allocmem 1
#t162 EQUALS 	return_value	=		
	stackpointer +8 
	restore registers  
	save registers  
	stackpointer -32 
	param #t161 
	param #t160 
	param #t159 
	param #t162 
	call Car.__init__ 4
	stackpointer +32 
	restore registers  
	car = #t162
	#t163 = car
	save registers  
	stackpointer -8 
	param #t163 
	call Car.start 1
	stackpointer +8 
	restore registers  
 EQUALS 		leave		
	return  
	endfunc