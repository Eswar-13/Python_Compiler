
factorial :
funcbegin
n = popparameter
#r0 = n
#r1 = 0
#r0 = #r0 <= #r1
if #r0 jump L1
jump L2
L1 :
#r2 = 1
push #r2
return
jump L3
L2 :
#r3 = n
#r4 = factorial
#r5 = n
#r6 = 1
#r5 = #r5 - #r6
param #r5
stackpointer +xxx
call factorial , 1
stackpointer -xxx
#r7 = popparameter
#r3 = #r3 * #r7
push #r3
return
L3 :
#r8 = 1
#r8 = - #r8
push #r8
return
funcend


area :
funcbegin
length = popparameter
width = popparameter
#r9 = 0
a = #r9
#r10 = a
push #r10
return
funcend


Vehicle :
classbegin

__init__ :
funcbegin
make = popparameter
model = popparameter
#r11 = make
self.make = #r11
#r12 = model
self.model = #r12
funcend


start :
funcbegin
param make
stackpointer +xxx
call print , 1
stackpointer -xxx
param model
stackpointer +xxx
call print , 1
stackpointer -xxx
funcend

classend

#r13 = Vehicle

Car :
Parent : Vehicle
classbegin

__init__ :
funcbegin
make = popparameter
model = popparameter
year = popparameter
#r14 = make
self.make = #r14
#r15 = model
self.model = #r15
#r16 = year
self.year = #r16
funcend


start :
funcbegin
param year
stackpointer +xxx
call print , 1
stackpointer -xxx
param make
stackpointer +xxx
call print , 1
stackpointer -xxx
param model
stackpointer +xxx
call print , 1
stackpointer -xxx
funcend

classend


main :
funcbegin
#r17 = 42
x = #r17
#r18 = 3.14
y = #r18
#r19 = "hello"
s = #r19
#r20 = 1
#r21 = 2
#r22 = 3
#r23 = 4
#r24 = 5
#r25 = 48
stackpointer + 8
param #r25
call mem_alloc , 1
stackpointer - 8
#r26=popparameter
#r27 = #r26
*#r27 = r25
#r27 = #r27 + 8
*#r27 = #r20
#r27 = #r27 + 8
*#r27 = #r21
#r27 = #r27 + 8
*#r27 = #r22
#r27 = #r27 + 8
*#r27 = #r23
#r27 = #r27 + 8
*#r27 = #r24
lst = #r26
#r28 = x
#r29 = y
#r28 = #r28 + #r29
a = #r28
#r30 = x
#r31 = y
#r30 = #r30 - #r31
b = #r30
#r32 = x
#r33 = y
#r32 = #r32 * #r33
c = #r32
#r34 = x
#r35 = y
#r34 = #r34 / #r35
d = #r34
#r36 = x
#r37 = y
#r36 = #r36 // #r37
e = #r36
#r38 = x
#r39 = y
#r38 = #r38 % #r39
f = #r38
#r40 = x
#r41 = y
#r40 = #r40 == #r41
param #r40
stackpointer +xxx
call print , 1
stackpointer -xxx
#r42 = x
#r43 = y
#r42 = #r42 != #r43
param #r42
stackpointer +xxx
call print , 1
stackpointer -xxx
#r44 = x
#r45 = y
#r44 = #r44 > #r45
param #r44
stackpointer +xxx
call print , 1
stackpointer -xxx
#r46 = x
#r47 = y
#r46 = #r46 < #r47
param #r46
stackpointer +xxx
call print , 1
stackpointer -xxx
#r48 = x
#r49 = y
#r48 = #r48 >= #r49
param #r48
stackpointer +xxx
call print , 1
stackpointer -xxx
#r50 = x
#r51 = y
#r50 = #r50 <= #r51
param #r50
stackpointer +xxx
call print , 1
stackpointer -xxx
#r52 = True
#r53 = False
#r52 = #r52 and #r53
param #r52
stackpointer +xxx
call print , 1
stackpointer -xxx
#r54 = True
#r55 = False
#r54 = #r54 or #r55
param #r54
stackpointer +xxx
call print , 1
stackpointer -xxx
#r56 = True
#r56 = not #r56
param #r56
stackpointer +xxx
call print , 1
stackpointer -xxx
#r57 = 10
p = #r57
#r58 = 11
q = #r58
#r59 = p
#r60 = q
#r59 = #r59 & #r60
param #r59
stackpointer +xxx
call print , 1
stackpointer -xxx
#r61 = p
#r62 = q
#r61 = #r61 | #r62
param #r61
stackpointer +xxx
call print , 1
stackpointer -xxx
#r63 = p
#r64 = q
#r63 = #r63 ^ #r64
param #r63
stackpointer +xxx
call print , 1
stackpointer -xxx
#r65 = p
#r65 = ~ #r65
param #r65
stackpointer +xxx
call print , 1
stackpointer -xxx
#r66 = x
#r67 = 5
x = #r67
#r68 = x
#r69 = 3
x = #r68 + #r69
#r70 = x
#r71 = 2
x = #r70 - #r71
#r72 = x
#r73 = 4
x = #r72 * #r73
#r74 = x
#r75 = 3
x = #r74 / #r75
#r76 = x
#r77 = 2
x = #r76 // #r77
#r78 = x
#r79 = 3
x = #r78 % #r79
#r80 = x
#r81 = 2
x = #r80 ** #r81
#r82 = y
#r83 = 2
y = #r83
#r84 = y
#r85 = 7
y = #r84 & #r85
#r86 = y
#r87 = 8
y = #r86 | #r87
#r88 = y
#r89 = 18
y = #r88 ^ #r89
#r90 = y
#r91 = 2
y = #r90 << #r91
#r92 = y
#r93 = 2
y = #r92 >> #r93
#r94 = x
#r95 = 10
#r94 = #r94 > #r95
if #r94 jump L4
jump L5
L4 :
#r96 = "x is greater than 10"
param #r96
stackpointer +xxx
call print , 1
stackpointer -xxx
jump L8
L5 :
#r97 = x
#r98 = 5
#r97 = #r97 < #r98
if #r97 jump L6
jump L7
L6 :
#r99 = "x is less than 5"
param #r99
stackpointer +xxx
call print , 1
stackpointer -xxx
jump L8
L7 :
#r100 = "x is between 5 and 10"
param #r100
stackpointer +xxx
call print , 1
stackpointer -xxx
L8 :
#r101 = 0
i = #r101
#r102 = 1
#r103 = 5
i = #r102 - 1
L9 :
i = i + 1
#r104 = i
#r104 = #r104 < #r103
if #r104 jump L10
jump L11
L10 :
#r105 = i
param #r105
stackpointer +xxx
call print , 1
stackpointer -xxx
jump L9
L11 :
#r106 = i
#r107 = 0
i = #r107
L12 :
#r108 = i
#r109 = 5
#r108 = #r108 < #r109
if #r108 jump L13
jump L16
L13 :
#r110 = i
param #r110
stackpointer +xxx
call print , 1
stackpointer -xxx
#r111 = i
#r112 = 1
i = #r111 + #r112
#r113 = i
#r114 = 3
#r113 = #r113 == #r114
if #r113 jump L14
jump L15
L14 :
jump L16
jump L15
L15 :
jump L12
L16 :
#r115 = factorial
#r116 = 5
param #r116
stackpointer +xxx
call factorial , 1
stackpointer -xxx
#r117 = popparameter
fact = #r117
#r118 = fact
param #r118
stackpointer +xxx
call print , 1
stackpointer -xxx
#r119 = area
#r120 = 5
#r121 = 3
param #r120
param #r121
stackpointer +xxx
call area , 2
stackpointer -xxx
#r122 = popparameter
ar = #r122
#r123 = ar
param #r123
stackpointer +xxx
call print , 1
stackpointer -xxx
#r124 = Car
#r125 = "Toyota"
#r126 = "Camry"
#r127 = 2020
param #r125
param #r126
param #r127
stackpointer +xxx
call Car.__init__ , 3
stackpointer -xxx
#r128 = popparameter
car = #r128
#r129 = car
stackpointer +xxx
call car.start , 0
stackpointer -xxx
#r130 = popparameter
funcend

#r131 = __name__
#r132 = '__main__'
#r131 = #r131 == #r132
if #r131 jump L17
jump L18
L17 :
#r133 = main
stackpointer +xxx
call main , 0
stackpointer -xxx
jump L18
L18 :
exit
